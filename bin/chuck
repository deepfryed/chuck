#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__) + '/../lib'

require 'bundler/setup'

require 'swift'
require 'swift/adapter/sqlite3'
require 'chuck'
require 'chuck/server'
require 'swift/migrations'

module Chuck
  class Cli
    def initialize
      @options = {db: ':memory:'}
    end

    def config op
      op.on('-d db',   '--db file',      String)  {|value| @options[:db]      = value}
      op.on('-p port', '--port name',    Integer) {|value| @options[:port]    = value}
      op.on('-f file', '--profile file', String)  {|value| @options[:profile] = value}
    end

    def parse!
      @parsed = OptionParser.new(&method(:config)).parse!
    end

    def options
      @parsed ? @options : parse! && @options
    end

    def run
      db = options.delete(:db)
      Swift.setup(:default, Swift::Adapter::Sqlite3, db: db)

      begin
        Swift.db.execute("select * from sessions")
      rescue
        Swift.migrate!
      end

      $stdout.sync = true
      $stderr.sync = true

      if db == ':memory:'
        $stdout.puts '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        $stdout.puts 'chuck is storing logs in memory'
        $stdout.puts '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      end

      Chuck::Server.new(options).start
    end
  end # Cli
end # Chuck

Chuck::Cli.new.run
